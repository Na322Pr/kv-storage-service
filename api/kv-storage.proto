syntax = "proto3";

package kv_storage_service;

import "google/protobuf/any.proto";

option go_package = "github.com/Na322Pr/kv-storage-service/pkg/kv-storage-service;kv_storage_service";

service KeyValueStorage {
  // Получение данных - must have
  rpc Get(GetRequest) returns (GetResponse);
  // Изменение данных - must have
  rpc Set(SetRequest) returns (SetResponse);
  // Измнение данных от мастера к репликам - must have
  rpc SetStream(stream SetRequest) returns (stream SetResponse);
  // Gossip - code but no usage
  rpc Gossip(GossipRequest) returns (GossipResponse);
  // Получение карты кластера - code but no usage
  rpc FetchFromSeed(FetchFromSeedRequest) returns (FetchFromSeedResponse);
  // Отдача информации для Leader Election
  rpc LeMeta(LeMetaRequest) returns (LeMetaResponse);
  // Извещение о новом лидере от cluster-manager-service
  rpc UpdateLeader(UpdateLeaderRequest) returns (UpdateLeaderResponse);
}

message GetRequest { string key = 1; }

message GetResponse {
  string value = 1;
  bool found = 2;
}

message SetRequest {
  string key = 1;
  string value = 2;
  optional string operation = 3;
}

message SetResponse {};

message GossipRequest { string node = 1; }

message GossipResponse { bool is_leader = 1; }

message LeaderVoteRequest {
  string candidate_address = 1;
  int64 term = 2;
}

message LeaderVoteResponse {
  bool vote_granted = 1;
  int64 term = 2;
}

message FetchFromSeedRequest {
  string address = 1;
}

message FetchFromSeedResponse {
  repeated string peers = 1;
}

message LeMetaRequest {}

message LeMetaResponse {
  int64 node  = 1;
  int64 data_version = 2;
}

message UpdateLeaderRequest {
  int64 id = 1;
  string address = 2;
}

message UpdateLeaderResponse {}

message Status {
  int32 code = 1;
  string message = 2;
}