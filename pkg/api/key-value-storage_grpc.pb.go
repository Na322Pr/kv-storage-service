// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/kv-storage-service.proto

package kv_storage_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KeyValueStorage_Get_FullMethodName           = "/kv_storage_service.KeyValueStorage/Get"
	KeyValueStorage_Set_FullMethodName           = "/kv_storage_service.KeyValueStorage/Set"
	KeyValueStorage_Gossip_FullMethodName        = "/kv_storage_service.KeyValueStorage/Gossip"
	KeyValueStorage_LeaderVote_FullMethodName    = "/kv_storage_service.KeyValueStorage/LeaderVote"
	KeyValueStorage_FetchFromSeed_FullMethodName = "/kv_storage_service.KeyValueStorage/FetchFromSeed"
)

// KeyValueStorageClient is the client API for KeyValueStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyValueStorageClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Gossip(ctx context.Context, in *GossipRequest, opts ...grpc.CallOption) (*GossipResponse, error)
	LeaderVote(ctx context.Context, in *LeaderVoteRequest, opts ...grpc.CallOption) (*LeaderVoteResponse, error)
	FetchFromSeed(ctx context.Context, in *FetchFromSeedRequest, opts ...grpc.CallOption) (*FetchFromSeedResponse, error)
}

type keyValueStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyValueStorageClient(cc grpc.ClientConnInterface) KeyValueStorageClient {
	return &keyValueStorageClient{cc}
}

func (c *keyValueStorageClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, KeyValueStorage_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStorageClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, KeyValueStorage_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStorageClient) Gossip(ctx context.Context, in *GossipRequest, opts ...grpc.CallOption) (*GossipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GossipResponse)
	err := c.cc.Invoke(ctx, KeyValueStorage_Gossip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStorageClient) LeaderVote(ctx context.Context, in *LeaderVoteRequest, opts ...grpc.CallOption) (*LeaderVoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaderVoteResponse)
	err := c.cc.Invoke(ctx, KeyValueStorage_LeaderVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStorageClient) FetchFromSeed(ctx context.Context, in *FetchFromSeedRequest, opts ...grpc.CallOption) (*FetchFromSeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchFromSeedResponse)
	err := c.cc.Invoke(ctx, KeyValueStorage_FetchFromSeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyValueStorageServer is the server API for KeyValueStorage service.
// All implementations must embed UnimplementedKeyValueStorageServer
// for forward compatibility.
type KeyValueStorageServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Gossip(context.Context, *GossipRequest) (*GossipResponse, error)
	LeaderVote(context.Context, *LeaderVoteRequest) (*LeaderVoteResponse, error)
	FetchFromSeed(context.Context, *FetchFromSeedRequest) (*FetchFromSeedResponse, error)
	mustEmbedUnimplementedKeyValueStorageServer()
}

// UnimplementedKeyValueStorageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeyValueStorageServer struct{}

func (UnimplementedKeyValueStorageServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKeyValueStorageServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedKeyValueStorageServer) Gossip(context.Context, *GossipRequest) (*GossipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gossip not implemented")
}
func (UnimplementedKeyValueStorageServer) LeaderVote(context.Context, *LeaderVoteRequest) (*LeaderVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaderVote not implemented")
}
func (UnimplementedKeyValueStorageServer) FetchFromSeed(context.Context, *FetchFromSeedRequest) (*FetchFromSeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchFromSeed not implemented")
}
func (UnimplementedKeyValueStorageServer) mustEmbedUnimplementedKeyValueStorageServer() {}
func (UnimplementedKeyValueStorageServer) testEmbeddedByValue()                         {}

// UnsafeKeyValueStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyValueStorageServer will
// result in compilation errors.
type UnsafeKeyValueStorageServer interface {
	mustEmbedUnimplementedKeyValueStorageServer()
}

func RegisterKeyValueStorageServer(s grpc.ServiceRegistrar, srv KeyValueStorageServer) {
	// If the following call pancis, it indicates UnimplementedKeyValueStorageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeyValueStorage_ServiceDesc, srv)
}

func _KeyValueStorage_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStorageServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueStorage_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStorageServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStorage_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStorageServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueStorage_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStorageServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStorage_Gossip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GossipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStorageServer).Gossip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueStorage_Gossip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStorageServer).Gossip(ctx, req.(*GossipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStorage_LeaderVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStorageServer).LeaderVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueStorage_LeaderVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStorageServer).LeaderVote(ctx, req.(*LeaderVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStorage_FetchFromSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchFromSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStorageServer).FetchFromSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyValueStorage_FetchFromSeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStorageServer).FetchFromSeed(ctx, req.(*FetchFromSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyValueStorage_ServiceDesc is the grpc.ServiceDesc for KeyValueStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyValueStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kv_storage_service.KeyValueStorage",
	HandlerType: (*KeyValueStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _KeyValueStorage_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _KeyValueStorage_Set_Handler,
		},
		{
			MethodName: "Gossip",
			Handler:    _KeyValueStorage_Gossip_Handler,
		},
		{
			MethodName: "LeaderVote",
			Handler:    _KeyValueStorage_LeaderVote_Handler,
		},
		{
			MethodName: "FetchFromSeed",
			Handler:    _KeyValueStorage_FetchFromSeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/kv-storage-service.proto",
}
